import javafx.geometry.Pos;
import org.rspeer.runetek.adapter.component.InterfaceComponent;
import org.rspeer.runetek.adapter.scene.SceneObject;
import org.rspeer.runetek.api.Game;
import org.rspeer.runetek.api.commons.StopWatch;
import org.rspeer.runetek.api.commons.Time;
import org.rspeer.runetek.api.component.Dialog;
import org.rspeer.runetek.api.component.GrandExchange;
import org.rspeer.runetek.api.component.Interfaces;
import org.rspeer.runetek.api.component.tab.Inventory;
import org.rspeer.runetek.api.component.tab.Skill;
import org.rspeer.runetek.api.component.tab.Skills;
import org.rspeer.runetek.api.component.tab.Spell;
import org.rspeer.runetek.api.movement.Movement;
import org.rspeer.runetek.api.movement.position.Area;
import org.rspeer.runetek.api.movement.position.Position;
import org.rspeer.runetek.api.scene.House;
import org.rspeer.runetek.api.scene.Npcs;
import org.rspeer.runetek.api.scene.Players;
import org.rspeer.runetek.api.scene.SceneObjects;
import org.rspeer.runetek.event.types.RenderEvent;
import org.rspeer.script.Script;
import org.rspeer.script.ScriptMeta;
import org.rspeer.script.ScriptCategory;
import org.rspeer.runetek.api.component.Bank;
import org.rspeer.script.task.TaskChangeListener;
import org.rspeer.ui.Log;
import org.rspeer.runetek.adapter.scene.Player;
import org.rspeer.runetek.event.listeners.RenderListener;

import java.awt.*;
import java.time.Instant;

@ScriptMeta(name = "CucBracelets ",  desc = "Makes gold bracelets at Edgeville", developer = "Cucumberman", category = ScriptCategory.SMITHING)
public class SmitherMain extends Script implements RenderListener {

    private StopWatch stopWatch;
    public boolean HAVE_BARS = false;
    public boolean SMITHING;
    private Instant lastAnimation;

    private static final Skill skill = Skill.CRAFTING;
    private static final int INIT_XP = Skills.getExperience(skill);
    private static final boolean enoughCoins = Inventory.getCount(995) >= 500000;

    @Override
    public void onStart() {
        stopWatch = StopWatch.start();
        if (!Inventory.contains("Bracelet mould")) {
            Log.info("No mould found, withdrawing");
            Npcs.getNearest("Banker").interact("Bank");
            if (Bank.open()) {
                Bank.withdraw("Bracelet mould", 1);
                Time.sleep(300);
            }
            if (Bank.open() && !Bank.contains("Bracelet mould")) {
                Log.info("No mould found, stopping");
                setStopping(true);
            }
        }
    }

    @Override
    public int loop() {
        Player Local = Players.getLocal();
        SceneObject Furnace = SceneObjects.getNearest("Furnace");
        SceneObject BOOTH = SceneObjects.getNearest("Grand Exchange booth");
        SceneObject BANK = SceneObjects.getNearest("Bank booth");

        Area SMITH_AREA = Area.rectangular(3105, 3501, 3110, 3496);
        Area GRAND_EXCHANGE = Area.rectangular(3159, 3494, 3171, 3483);
        InterfaceComponent SMITH_INTERFACE = Interfaces.getComponent(446, 0);
        InterfaceComponent BAR_INTERFACE = Interfaces.getComponent(446, 46);

        if (GRAND_EXCHANGE.contains(Local)){
            BOOTH.interact("Exchange");
            Log.info("Interacting with G.E");
            Time.sleepUntil(() -> GrandExchange.isOpen(), 300, 3000);
        }
        if (enoughCoins) {
            Log.info("Enough Coins true");
            Time.sleep(1000);
        }

        if (Game.isOnCredentialsScreen()){
            SMITHING = false;
        }


        if (!Movement.isRunEnabled() && Movement.getRunEnergy() > 20 && !Bank.isOpen() && !SMITH_AREA.contains(Local)){
            Log.info("We have energy, let's run");
            Movement.toggleRun(true);
            return 1000;
        }

        if (Inventory.contains("Gold bar")) {
            HAVE_BARS = true;
        } else if (!Inventory.contains("Gold bar")) {
            HAVE_BARS = false;
        }

        if (Inventory.contains("Bracelet mould") && !HAVE_BARS && (!Bank.isOpen())) {
            BANK.interact("Bank");
            Time.sleepUntil(() -> Bank.isOpen(), 250, 2500);
            Log.info("Out of bars, banking");
            return 2000;
        }
        if (Bank.isOpen()) {
            Bank.depositAll("Gold bracelet");
            Time.sleep(300);
            Bank.withdrawAll("Gold bar");
            Time.sleep(300);
            Bank.close();
            SMITHING = false;
        }

        if (!Game.isLoggedIn()) {
            Log.info("NNot logged in");
        }

        if (Dialog.isViewingChat()) {
            Dialog.processContinue();
            SMITHING = false;
        }


        if (SMITH_INTERFACE != null && SMITH_INTERFACE.isVisible() && BAR_INTERFACE != null && BAR_INTERFACE.isVisible() && Inventory.contains("Bracelet mould") && HAVE_BARS) {
            BAR_INTERFACE.click();
            Time.sleepUntil(() -> !Inventory.contains("Gold bar"), 2500, 2500);
            SMITHING = true;

        }

        if (Local.getAnimation() == 899) {
            lastAnimation = Instant.now();
        }

        if (lastAnimation == null || lastAnimation.plusMillis(2400).isBefore(Instant.now())) {
            Log.info("Smelting");
            Furnace.interact("Smelt");
            //Time.sleepUntil(() -> !Local.isAnimating(), 3000, 10000);
            Time.sleepUntil(() -> SMITH_INTERFACE != null && SMITH_INTERFACE.isVisible() && BAR_INTERFACE != null && BAR_INTERFACE.isVisible(), 300, 2500);
        }

       /* if (Inventory.contains("Bracelet mould") && HAVE_BARS && !SMITHING) {
            Log.info("Smelting");
            Furnace.interact("Smelt");
            //Time.sleepUntil(() -> !Local.isAnimating(), 3000, 10000);
            Time.sleepUntil(() -> SMITH_INTERFACE != null && SMITH_INTERFACE.isVisible() && BAR_INTERFACE != null && BAR_INTERFACE.isVisible(), 300, 5000);
        } */

        if (Bank.isOpen() && !Bank.contains("Bracelet mould") && !HAVE_BARS) {
            Time.sleep(4000);
            Log.info("Out of bars, stopping");
            setStopping(true);
        }

        return 1000;
    }

    @Override
    public void onStop() {

    }

    @Override
    public void notify(RenderEvent e) {
        long seconds = stopWatch.getElapsed().getSeconds();
        if (seconds <= 0)
            return;

        //Initialize our graphics
        Graphics g = e.getSource();
        Graphics2D g2 = (Graphics2D) g;
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        int y = 38;
        int x = 9;
        //Background semi-transparent fill
        g.setColor(new Color(0, 0, 0, 60));
        g.fillRect(x - 3, 38 - 13, 175, 100);

        g2.setColor(Color.white);
        g2.drawString("Runtime: " + stopWatch.toElapsedString(), x, y);
        g2.drawString("Crafting [" + Skills.getCurrentLevel(skill) + "]", x, y += 20);
        g2.drawString("XP to next lvl: " + Skills.getExperienceToNextLevel(skill), x, y += 20);

        //Xp gains
        int craftXp = Skills.getExperience(skill) - INIT_XP;
        if (craftXp > 0)
        g2.drawString("Crafting XP: " + craftXp + " (" + (int) stopWatch.getHourlyRate(craftXp) / 1000 + "k /h)", x, y += 20);
        g2.drawString("Bars made " + craftXp / 25, x, y += 20);
    }
}
